name: ❄️ Snowflake Full Deploy with Auto-Rollback

on:
  push:
    branches:
      - cherry-pick
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  actions: read

jobs:
  # Step 1: Capture rollback timestamp before deployment
  capture_timestamp:
    runs-on: ubuntu-latest
    outputs:
      rollback_timestamp: ${{ steps.get_ts.outputs.rollback_timestamp }}
    env:
      SNOWFLAKE_ACCOUNT:               ${{ secrets.SNOWFLAKE_ACCOUNT }}
      SNOWFLAKE_USER:                  ${{ secrets.SNOWFLAKE_USER }}
      SNOWFLAKE_PRIVATE_KEY:           ${{ secrets.SNOWFLAKE_PRIVATE_KEY }}
      SNOWFLAKE_PRIVATE_KEY_PASSPHRASE: ${{ secrets.SNOWFLAKE_PRIVATE_KEY_PASSPHRASE }}
      SNOWFLAKE_ROLE:                  ${{ secrets.SNOWFLAKE_ROLE }}
      SNOWFLAKE_WAREHOUSE:             ${{ secrets.SNOWFLAKE_WAREHOUSE }}
      SNOWFLAKE_DATABASE:              ${{ secrets.SNOWFLAKE_DATABASE }}
    steps:
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: pip install snowflake-connector-python cryptography

      - name: Get Snowflake Timestamp
        id: get_ts
        run: |
          python scripts/get_snowflake_timestamp.py > rollback_timestamp.txt
          ts=$(cat rollback_timestamp.txt)
          echo "rollback_timestamp=$ts" >> $GITHUB_OUTPUT

  # Step 2: Deploy job that runs your current deployment logic
  deploy:
    needs: capture_timestamp
    runs-on: ubuntu-latest
    timeout-minutes: 45
    env:
      GIT_USER_NAME:    "Sagar-korumilli"
      GIT_USER_EMAIL:   "sagar.korumilli11@gmail.com"
      GIT_PUSH_TOKEN:   ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      SNOWFLAKE_ACCOUNT:               ${{ secrets.SNOWFLAKE_ACCOUNT }}
      SNOWFLAKE_USER:                  ${{ secrets.SNOWFLAKE_USER }}
      SNOWFLAKE_PRIVATE_KEY:           ${{ secrets.SNOWFLAKE_PRIVATE_KEY }}
      SNOWFLAKE_PRIVATE_KEY_PASSPHRASE: ${{ secrets.SNOWFLAKE_PRIVATE_KEY_PASSPHRASE }}
      SNOWFLAKE_ROLE:                  ${{ secrets.SNOWFLAKE_ROLE }}
      SNOWFLAKE_WAREHOUSE:             ${{ secrets.SNOWFLAKE_WAREHOUSE }}
      SNOWFLAKE_DATABASE:              ${{ secrets.SNOWFLAKE_DATABASE }}

      ROLLBACK_TIMESTAMP:              ${{ needs.capture_timestamp.outputs.rollback_timestamp }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          persist-credentials: true

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install schemachange==4.0.1 snowflake-connector-python GitPython cryptography

      - name: Validate Snowflake env vars
        run: |
          for v in SNOWFLAKE_ACCOUNT SNOWFLAKE_USER SNOWFLAKE_PRIVATE_KEY \
                  SNOWFLAKE_PRIVATE_KEY_PASSPHRASE SNOWFLAKE_ROLE \
                  SNOWFLAKE_WAREHOUSE SNOWFLAKE_DATABASE; do
            if [ -z "${!v}" ]; then
              echo "❌ Missing $v"
              exit 1
            fi
          done

      - name: Write private key file
        run: |
          echo "$SNOWFLAKE_PRIVATE_KEY" > key.pem
          chmod 600 key.pem

      - name: Generate connections.toml
        run: |
          cat > connections.toml <<EOF
          [connections]
            account             = "${SNOWFLAKE_ACCOUNT}"
            user                = "${SNOWFLAKE_USER}"
            private_key_file    = "key.pem"
            private_key_file_pwd= "${SNOWFLAKE_PRIVATE_KEY_PASSPHRASE}"
            authenticator       = "snowflake_jwt"
            role                = "${SNOWFLAKE_ROLE}"
            warehouse           = "${SNOWFLAKE_WAREHOUSE}"
            database            = "${SNOWFLAKE_DATABASE}"
          EOF
          chmod 600 connections.toml

      - name: Validate for risky SQL
        run: python scripts/sql_risk_validator.py --snowflake-root snowflake/

      - name: Deploy versioned migrations
        run: |
          for d in snowflake/*; do
            if [ -d "$d" ] && [[ "$(basename "$d")" != "rollback" ]]; then
              schema_name=$(basename "$d")
              schemachange deploy \
                --connections-file connections.toml \
                --connection-name connections \
                --root-folder $d \
                --change-history-table "${{ secrets.SNOWFLAKE_DATABASE }}.${schema_name}.SCHEMA_CHANGE_HISTORY" \
                --create-change-history-table -v
            fi
          done

      - name: Snapshot updated DDL baseline
        run: python scripts/backup_ddl.py --snowflake-root snowflake/

      - name: Clean up temporary files
        if: always()
        run: |
          rm -f key.pem connections.toml
          echo "✔️ Completed Snowflake deploy for all schema folders under snowflake/."

  # Step 3: Automatic rollback job runs only if deploy fails
  rollback:
    needs: [capture_timestamp, deploy]
    runs-on: ubuntu-latest
    if: needs.deploy.result == 'failure'
    env:
      SNOWFLAKE_ACCOUNT:               ${{ secrets.SNOWFLAKE_ACCOUNT }}
      SNOWFLAKE_USER:                  ${{ secrets.SNOWFLAKE_USER }}
      SNOWFLAKE_PRIVATE_KEY:           ${{ secrets.SNOWFLAKE_PRIVATE_KEY }}
      SNOWFLAKE_PRIVATE_KEY_PASSPHRASE: ${{ secrets.SNOWFLAKE_PRIVATE_KEY_PASSPHRASE }}
      SNOWFLAKE_ROLE:                  ${{ secrets.SNOWFLAKE_ROLE }}
      SNOWFLAKE_WAREHOUSE:             ${{ secrets.SNOWFLAKE_WAREHOUSE }}
      SNOWFLAKE_DATABASE:              ${{ secrets.SNOWFLAKE_DATABASE }}
      ROLLBACK_TIMESTAMP:              ${{ needs.capture_timestamp.outputs.rollback_timestamp }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: pip install snowflake-connector-python cryptography

      - name: Automatic Rollback using Time Travel
        run: |
          echo "Rollback timestamp: $ROLLBACK_TIMESTAMP"
          python scripts/rollback_time_travel.py --timestamp "$ROLLBACK_TIMESTAMP" --database "$SNOWFLAKE_DATABASE"
