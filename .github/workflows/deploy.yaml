name: ‚ùÑÔ∏è Snowflake Full Deploy

on:
  push:
    branches:
      - keypair
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install schemachange==4.0.1 snowflake-connector-python GitPython

      - name: Validate Snowflake env vars
        env:
          SNOWFLAKE_ACCOUNT:               ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_USER:                  ${{ secrets.SNOWFLAKE_USER }}
          SNOWFLAKE_PRIVATE_KEY:           ${{ secrets.SNOWFLAKE_PRIVATE_KEY }}
          SNOWFLAKE_PRIVATE_KEY_PASSPHRASE: ${{ secrets.SNOWFLAKE_PRIVATE_KEY_PASSPHRASE }}
          SNOWFLAKE_ROLE:                  ${{ secrets.SNOWFLAKE_ROLE }}
          SNOWFLAKE_WAREHOUSE:             ${{ secrets.SNOWFLAKE_WAREHOUSE }}
          SNOWFLAKE_DATABASE:              ${{ secrets.SNOWFLAKE_DATABASE }}
        run: |
          for v in SNOWFLAKE_ACCOUNT SNOWFLAKE_USER SNOWFLAKE_PRIVATE_KEY SNOWFLAKE_PRIVATE_KEY_PASSPHRASE SNOWFLAKE_ROLE SNOWFLAKE_WAREHOUSE SNOWFLAKE_DATABASE; do
            if [ -z "${!v}" ]; then
              echo "‚ùå Missing $v"
              exit 1
            fi
          done

      - name: Write private key file
        run: |
          echo "$SNOWFLAKE_PRIVATE_KEY" > key.pem
          chmod 600 key.pem
        env:
          SNOWFLAKE_PRIVATE_KEY: ${{ secrets.SNOWFLAKE_PRIVATE_KEY }}

      - name: Generate connections.toml
        run: |
          cat > connections.toml <<EOF
            [connections]
              account             = "${SNOWFLAKE_ACCOUNT}"
              user                = "${SNOWFLAKE_USER}"
              private_key_file    = "key.pem"
              private_key_file_pwd= "${SNOWFLAKE_PRIVATE_KEY_PASSPHRASE}"
              authenticator       = "snowflake_jwt"
              role                = "${SNOWFLAKE_ROLE}"
              warehouse           = "${SNOWFLAKE_WAREHOUSE}"
              database            = "${SNOWFLAKE_DATABASE}"
          EOF
          chmod 600 connections.toml
        env:
          SNOWFLAKE_ACCOUNT:               ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_USER:                  ${{ secrets.SNOWFLAKE_USER }}
          SNOWFLAKE_PRIVATE_KEY_PASSPHRASE: ${{ secrets.SNOWFLAKE_PRIVATE_KEY_PASSPHRASE }}
          SNOWFLAKE_ROLE:                  ${{ secrets.SNOWFLAKE_ROLE }}
          SNOWFLAKE_WAREHOUSE:             ${{ secrets.SNOWFLAKE_WAREHOUSE }}
          SNOWFLAKE_DATABASE:              ${{ secrets.SNOWFLAKE_DATABASE }}

      - name: Validate for risky SQL
        run: python scripts/sql_risk_validator.py

      - name: Check object dependencies
        env:
          SNOWFLAKE_ACCOUNT:               ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_USER:                  ${{ secrets.SNOWFLAKE_USER }}
          SNOWFLAKE_PRIVATE_KEY:           ${{ secrets.SNOWFLAKE_PRIVATE_KEY }}
          SNOWFLAKE_PRIVATE_KEY_PASSPHRASE: ${{ secrets.SNOWFLAKE_PRIVATE_KEY_PASSPHRASE }}
          SNOWFLAKE_ROLE:                  ${{ secrets.SNOWFLAKE_ROLE }}
          SNOWFLAKE_WAREHOUSE:             ${{ secrets.SNOWFLAKE_WAREHOUSE }}
          SNOWFLAKE_DATABASE:              ${{ secrets.SNOWFLAKE_DATABASE }}
        run: python scripts/dependency_checker.py

      - name: Backup tables using zero-copy
        env:
          SNOWFLAKE_ACCOUNT:               ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_USER:                  ${{ secrets.SNOWFLAKE_USER }}
          SNOWFLAKE_PRIVATE_KEY:           ${{ secrets.SNOWFLAKE_PRIVATE_KEY }}
          SNOWFLAKE_PRIVATE_KEY_PASSPHRASE: ${{ secrets.SNOWFLAKE_PRIVATE_KEY_PASSPHRASE }}
          SNOWFLAKE_ROLE:                  ${{ secrets.SNOWFLAKE_ROLE }}
          SNOWFLAKE_WAREHOUSE:             ${{ secrets.SNOWFLAKE_WAREHOUSE }}
          SNOWFLAKE_DATABASE:              ${{ secrets.SNOWFLAKE_DATABASE }}
        run: |
          python scripts/clone_tables.py --migrations-folder snowflake/migrations

      - name: Get all unique schemas from setup and migrations folders
        id: get-schemas
        run: |
          SETUP_SCHEMAS=$(find snowflake/setup -maxdepth 1 -type f -name '*.sql' -printf "%f\n" | awk -F '__' '{print $2}' | sort -u)
          MIGRATION_SCHEMAS=$(find snowflake/migrations -maxdepth 1 -type f -name '*.sql' -printf "%f\n" | awk -F '__' '{print $2}' | sort -u)
          ALL_SCHEMAS=$(echo "$SETUP_SCHEMAS $MIGRATION_SCHEMAS" | tr ' ' '\n' | sort -u | tr '\n' ' ')
          echo "ALL_SCHEMAS=${ALL_SCHEMAS}" >> $GITHUB_OUTPUT
          echo "CURRENT_COMMIT=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: Bootstrap schemas (Initial Setup or New Schema Deployment)
        if: steps.get-schemas.outputs.ALL_SCHEMAS != ''
        run: |
          for schema_name in ${{ steps.get-schemas.outputs.ALL_SCHEMAS }}; do
            schemachange deploy \
              --connections-file connections.toml \
              --connection-name connections \
              --root-folder snowflake/setup \
              --file-filter "__${schema_name}__" \
              --change-history-table "${{ secrets.SNOWFLAKE_DATABASE }}.${schema_name}.SCHEMA_CHANGE_HISTORY" \
              --create-change-history-table -v
          done

      - name: Apply incremental migrations
        if: steps.get-schemas.outputs.ALL_SCHEMAS != ''
        run: |
          for schema_name in ${{ steps.get-schemas.outputs.ALL_SCHEMAS }}; do
            schemachange deploy \
              --connections-file connections.toml \
              --connection-name connections \
              --root-folder snowflake/migrations \
              --file-filter "__${schema_name}__" \
              --change-history-table "${{ secrets.SNOWFLAKE_DATABASE }}.${schema_name}.SCHEMA_CHANGE_HISTORY" -v
          done


      - name: Run rollback on failure
        if: failure()
        run: |
          echo "‚ùå Deployment failed. Running rollback..."
          for file in snowflake/rollback/*.sql; do
            echo "üåÄ Executing rollback: $file"
            schemachange deploy \
              --connections-file connections.toml \
              --connection-name connections \
              --root-folder snowflake/rollback \
              --file-filter "__${schema_name}__" \
              --change-history-table "${{ secrets.SNOWFLAKE_DATABASE }}.PUBLIC.SCHEMA_CHANGE_HISTORY" \
              --file-filter "$file" -v
          done

      - name: Nothing to do
        if: steps.get-schemas.outputs.ALL_SCHEMAS == ''
        run: echo "‚úîÔ∏è No schema files found. Skipping deployment."
