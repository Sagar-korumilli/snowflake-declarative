name: ‚ùÑÔ∏è Snowflake Full Deploy

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install schemachange==4.0.1 snowflake-connector-python

      - name: Validate Snowflake env vars
        env:
          SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
          SNOWFLAKE_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
          SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
          SNOWFLAKE_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE }}
        run: |
          for v in SNOWFLAKE_ACCOUNT SNOWFLAKE_USER SNOWFLAKE_PASSWORD SNOWFLAKE_ROLE SNOWFLAKE_WAREHOUSE SNOWFLAKE_DATABASE; do
            if [ -z "${!v}" ]; then
              echo "‚ùå Missing $v"
              exit 1
            fi
          done

      - name: Get all unique schemas from setup and migrations folders
        id: get-schemas
        run: |
          # Extract schema names (e.g., 'hr') from filenames like V001__hr__full_setup.sql
          SETUP_SCHEMAS=$(find snowflake/setup -maxdepth 1 -type f -name '*.sql' -printf "%f\n" | awk -F '__' '{print $2}' | sort -u)
          echo "Discovered schemas in setup: $SETUP_SCHEMAS"
          MIGRATION_SCHEMAS=$(find snowflake/migrations -maxdepth 1 -type f -name '*.sql' -printf "%f\n" | awk -F '__' '{print $2}' | sort -u)
          echo "Discovered schemas in migrations: $MIGRATION_SCHEMAS"
          
          # Combine and get unique schema names
          ALL_SCHEMAS=$(echo "$SETUP_SCHEMAS $MIGRATION_SCHEMAS" | tr ' ' '\n' | sort -u | tr '\n' ' ')
          echo "ALL_SCHEMAS=${ALL_SCHEMAS}" >> $GITHUB_OUTPUT
          echo "Combined unique schemas for deployment: $ALL_SCHEMAS"

      - name: Ensure Schemachange Metadata Schema Exists
        # This step ensures the schema for schemachange's internal history table exists
        # It's crucial to run this before any schemachange commands.
        env:
          SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
          SNOWFLAKE_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
          SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
          SNOWFLAKE_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE }}
        run: |
          python -c "
import snowflake.connector
import os

conn = snowflake.connector.connect(
    user=os.environ['SNOWFLAKE_USER'],
    password=os.environ['SNOWFLAKE_PASSWORD'],
    account=os.environ['SNOWFLAKE_ACCOUNT'],
    warehouse=os.environ['SNOWFLAKE_WAREHOUSE'],
    database=os.environ['SNOWFLAKE_DATABASE'],
    role=os.environ['SNOWFLAKE_ROLE'],
    ocsp_fail_open=True # As per your existing workflow
)

try:
    cursor = conn.cursor()
    # Create a dedicated schema for schemachange's history table if it doesn't exist
    schema_name = 'SCHEMACHANGE_METADATA'
    db_name = os.environ['SNOWFLAKE_DATABASE']
    print(f'Ensuring schema {db_name}.{schema_name} exists for schemachange history...')
    cursor.execute(f'CREATE SCHEMA IF NOT EXISTS {db_name}.{schema_name}')
    print(f'Schema {db_name}.{schema_name} is ready.')
finally:
    conn.close()
"

      - name: Bootstrap schemas (Initial Setup or New Schema Deployment)
        # This step runs the initial setup scripts for each discovered schema.
        # It uses the 'snowflake/setup' folder.
        if: github.event_name == 'workflow_dispatch' || steps.get-schemas.outputs.ALL_SCHEMAS != ''
        env:
          SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
          SNOWFLAKE_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
          SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
          SNOWFLAKE_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE }}
          SNOWFLAKE_OCSP_FAIL_OPEN: "true"
        run: |
          set -euo pipefail
          echo "üöÄ Running bootstrap for each schema using files in snowflake/setup/..."
          for schema_name in ${{ steps.get-schemas.outputs.ALL_SCHEMAS }}; do
            echo "‚öôÔ∏è Processing initial setup for schema: $schema_name"
            schemachange \
              --root-folder snowflake/setup \
              --snowflake-account "$SNOWFLAKE_ACCOUNT" \
              --snowflake-user "$SNOWFLAKE_USER" \
              --snowflake-password "$SNOWFLAKE_PASSWORD" \
              --snowflake-role "$SNOWFLAKE_ROLE" \
              --snowflake-warehouse "$SNOWFLAKE_WAREHOUSE" \
              --snowflake-database "$SNOWFLAKE_DATABASE" \
              --snowflake-schema "$schema_name" \
              --change-history-table "${SNOWFLAKE_DATABASE}.SCHEMACHANGE_METADATA.CHANGE_HISTORY" \
              --create-change-history-table \
              -v
          done

      - name: Apply incremental migrations
        # This step applies incremental migration scripts for each discovered schema.
        # It uses the 'snowflake/migrations' folder.
        if: github.event_name == 'workflow_dispatch' || steps.get-schemas.outputs.ALL_SCHEMAS != ''
        env:
          SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
          SNOWFLAKE_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
          SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
          SNOWFLAKE_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE }}
          SNOWFLAKE_OCSP_FAIL_OPEN: "true"
        run: |
          set -euo pipefail
          echo "üîÅ Applying incremental migrations for each schema using files in snowflake/migrations/..."
          for schema_name in ${{ steps.get-schemas.outputs.ALL_SCHEMAS }}; do
            echo "üìÑ Processing migrations for schema: $schema_name"
            schemachange deploy \
              --root-folder snowflake/migrations \
              --snowflake-account "$SNOWFLAKE_ACCOUNT" \
              --snowflake-user "$SNOWFLAKE_USER" \
              --snowflake-password "$SNOWFLAKE_PASSWORD" \
              --snowflake-role "$SNOWFLAKE_ROLE" \
              --snowflake-warehouse "$SNOWFLAKE_WAREHOUSE" \
              --snowflake-database "$SNOWFLAKE_DATABASE" \
              --snowflake-schema "$schema_name" \
              --change-history-table "${SNOWFLAKE_DATABASE}.SCHEMACHANGE_METADATA.CHANGE_HISTORY" \
              -v
          done

      - name: Nothing to do
        if: github.event_name != 'workflow_dispatch' && steps.get-schemas.outputs.ALL_SCHEMAS == ''
        run: echo "‚úîÔ∏è No schema files found in the repository. Skipping deployment."
