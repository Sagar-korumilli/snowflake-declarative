name: ‚ùÑÔ∏è Snowflake Full Deploy with Auto-Rollback

on:
  push:
    branches:
      - cherry-pick
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  actions: read

jobs:
  # Step 1: Capture rollback timestamp before deployment
  capture_timestamp:
    runs-on: ubuntu-latest
    outputs:
      rollback_timestamp: ${{ steps.get_ts.outputs.rollback_timestamp }}
    env:
      SNOWFLAKE_ACCOUNT:               ${{ secrets.SNOWFLAKE_ACCOUNT }}
      SNOWFLAKE_USER:                  ${{ secrets.SNOWFLAKE_USER }}
      SNOWFLAKE_PRIVATE_KEY:           ${{ secrets.SNOWFLAKE_PRIVATE_KEY }}
      SNOWFLAKE_PRIVATE_KEY_PASSPHRASE: ${{ secrets.SNOWFLAKE_PRIVATE_KEY_PASSPHRASE }}
      SNOWFLAKE_ROLE:                  ${{ secrets.SNOWFLAKE_ROLE }}
      SNOWFLAKE_WAREHOUSE:             ${{ secrets.SNOWFLAKE_WAREHOUSE }}
      SNOWFLAKE_DATABASE:              ${{ secrets.SNOWFLAKE_DATABASE }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: pip install snowflake-connector-python cryptography

      - name: Get Snowflake Timestamp
        id: get_ts
        run: |
          python scripts/get_snowflake_timestamp.py > rollback_timestamp.txt
          ts=$(<rollback_timestamp.txt)
          echo "rollback_timestamp=$ts" >> $GITHUB_OUTPUT


  # Step 2: Deploy job that also captures which schema/table failed
  deploy:
    needs: capture_timestamp
    runs-on: ubuntu-latest
    timeout-minutes: 45
    outputs:
      failed_schema: ${{ steps.deploy_migrations.outputs.failed_schema }}
      failed_table:  ${{ steps.deploy_migrations.outputs.failed_table }}
    env:
      SNOWFLAKE_ACCOUNT:               ${{ secrets.SNOWFLAKE_ACCOUNT }}
      SNOWFLAKE_USER:                  ${{ secrets.SNOWFLAKE_USER }}
      SNOWFLAKE_PRIVATE_KEY:           ${{ secrets.SNOWFLAKE_PRIVATE_KEY }}
      SNOWFLAKE_PRIVATE_KEY_PASSPHRASE: ${{ secrets.SNOWFLAKE_PRIVATE_KEY_PASSPHRASE }}
      SNOWFLAKE_ROLE:                  ${{ secrets.SNOWFLAKE_ROLE }}
      SNOWFLAKE_WAREHOUSE:             ${{ secrets.SNOWFLAKE_WAREHOUSE }}
      SNOWFLAKE_DATABASE:              ${{ secrets.SNOWFLAKE_DATABASE }}
      ROLLBACK_TIMESTAMP:              ${{ needs.capture_timestamp.outputs.rollback_timestamp }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          persist-credentials: true

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install schemachange==4.0.1 snowflake-connector-python GitPython cryptography

      - name: Validate Snowflake env vars
        run: |
          for v in SNOWFLAKE_ACCOUNT SNOWFLAKE_USER SNOWFLAKE_PRIVATE_KEY \
                  SNOWFLAKE_PRIVATE_KEY_PASSPHRASE SNOWFLAKE_ROLE \
                  SNOWFLAKE_WAREHOUSE SNOWFLAKE_DATABASE; do
            if [ -z "${!v}" ]; then
              echo "‚ùå Missing $v"
              exit 1
            fi
          done

      - name: Write private key file
        run: |
          echo "$SNOWFLAKE_PRIVATE_KEY" > key.pem
          chmod 600 key.pem

      - name: Generate connections.toml
        run: |
          cat > connections.toml <<EOF
          [connections]
            account             = "${SNOWFLAKE_ACCOUNT}"
            user                = "${SNOWFLAKE_USER}"
            private_key_file    = "key.pem"
            private_key_file_pwd= "${SNOWFLAKE_PRIVATE_KEY_PASSPHRASE}"
            authenticator       = "snowflake_jwt"
            role                = "${SNOWFLAKE_ROLE}"
            warehouse           = "${SNOWFLAKE_WAREHOUSE}"
            database            = "${SNOWFLAKE_DATABASE}"
          EOF
          chmod 600 connections.toml

      - name: Validate for risky SQL
        run: python scripts/sql_risk_validator.py --snowflake-root snowflake/

      - name: Deploy versioned migrations
        id: deploy_migrations
        shell: bash
        run: |
          for d in snowflake/*; do
            if [ -d "$d" ] && [[ "$(basename "$d")" != "rollback" ]]; then
              schema_name=$(basename "$d")
              echo "üöÄ Deploying schema $schema_name"
              set -o pipefail

              # Run schemachange and tee both stdout+stderr into a log
              schemachange deploy \
                --connections-file connections.toml \
                --connection-name connections \
                --root-folder $d \
                --change-history-table "${SNOWFLAKE_DATABASE}.${schema_name}.SCHEMA_CHANGE_HISTORY" \
                --create-change-history-table -v 2>&1 \
                | tee migration.log

              rc=${PIPESTATUS[0]}
              if [ $rc -ne 0 ]; then
                # Extract the failing script name (without .sql)
                failed_script=$(grep -oP 'Failed to execute \K.*(?=\.sql)' migration.log || true)
                # Derive a table name from script: take the part after "__" and before any "_"
                table_name=$(echo "$failed_script" \
                  | sed -E 's/^V[0-9]+__([A-Za-z0-9]+).*/\1/')

                echo "failed_schema=$schema_name" >> $GITHUB_OUTPUT
                echo "failed_table=$table_name"  >> $GITHUB_OUTPUT
                exit $rc
              fi
            fi
          done

      - name: Snapshot updated DDL baseline
        if: success()
        env:
          SNOWFLAKE_ACCOUNT:               ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_USER:                  ${{ secrets.SNOWFLAKE_USER }}
          SNOWFLAKE_PRIVATE_KEY:           ${{ secrets.SNOWFLAKE_PRIVATE_KEY }}
          SNOWFLAKE_PRIVATE_KEY_PASSPHRASE: ${{ secrets.SNOWFLAKE_PRIVATE_KEY_PASSPHRASE }}
          SNOWFLAKE_ROLE:                  ${{ secrets.SNOWFLAKE_ROLE }}
          SNOWFLAKE_WAREHOUSE:             ${{ secrets.SNOWFLAKE_WAREHOUSE }}
          SNOWFLAKE_DATABASE:              ${{ secrets.SNOWFLAKE_DATABASE }}
        run: python scripts/backup_ddl.py --snowflake-root snowflake/

      - name: Clean up temporary files
        if: always()
        run: |
          rm -f key.pem connections.toml migration.log
          echo "‚úîÔ∏è Completed Snowflake deploy for all schemas."


  # Step 3: Automatic rollback job runs only if deploy fails
  rollback:
    needs: [capture_timestamp, deploy]
    runs-on: ubuntu-latest
    if: failure() && needs.capture_timestamp.result == 'success'
    env:
      SNOWFLAKE_ACCOUNT:               ${{ secrets.SNOWFLAKE_ACCOUNT }}
      SNOWFLAKE_USER:                  ${{ secrets.SNOWFLAKE_USER }}
      SNOWFLAKE_PRIVATE_KEY:           ${{ secrets.SNOWFLAKE_PRIVATE_KEY }}
      SNOWFLAKE_PRIVATE_KEY_PASSPHRASE: ${{ secrets.SNOWFLAKE_PRIVATE_KEY_PASSPHRASE }}
      SNOWFLAKE_ROLE:                  ${{ secrets.SNOWFLAKE_ROLE }}
      SNOWFLAKE_WAREHOUSE:             ${{ secrets.SNOWFLAKE_WAREHOUSE }}
      SNOWFLAKE_DATABASE:              ${{ secrets.SNOWFLAKE_DATABASE }}
      ROLLBACK_TIMESTAMP:              ${{ needs.capture_timestamp.outputs.rollback_timestamp }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: pip install snowflake-connector-python cryptography

      - name: Auto-rollback only failed object
        run: |
          echo "Rollback timestamp: $ROLLBACK_TIMESTAMP"
          echo "Rolling back ${FAILED_SCHEMA}.${FAILED_TABLE}..."
          python scripts/rollback_time_travel.py \
            --timestamp "$ROLLBACK_TIMESTAMP" \
            --database "$SNOWFLAKE_DATABASE" \
            --schema "${{ needs.deploy.outputs.failed_schema }}" \
            --tables "${{ needs.deploy.outputs.failed_table }}"
