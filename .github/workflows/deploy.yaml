name: ❄️ Snowflake Full Deploy

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install schemachange==4.0.1 snowflake-connector-python GitPython

      - name: Validate Snowflake env vars
        env:
          SNOWFLAKE_ACCOUNT:  ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_USER:     ${{ secrets.SNOWFLAKE_USER }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
          SNOWFLAKE_ROLE:     ${{ secrets.SNOWFLAKE_ROLE }}
          SNOWFLAKE_WAREHOUSE:${{ secrets.SNOWFLAKE_WAREHOUSE }}
          SNOWFLAKE_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE }}
        run: |
          for v in SNOWFLAKE_ACCOUNT SNOWFLAKE_USER SNOWFLAKE_PASSWORD SNOWFLAKE_ROLE SNOWFLAKE_WAREHOUSE SNOWFLAKE_DATABASE; do
            if [ -z "${!v}" ]; then
              echo "❌ Missing $v"
              exit 1
            fi
          done

      - name: Validate for risky SQL
        env:
          SNOWFLAKE_ACCOUNT:  ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_USER:     ${{ secrets.SNOWFLAKE_USER }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
          SNOWFLAKE_ROLE:     ${{ secrets.SNOWFLAKE_ROLE }}
          SNOWFLAKE_WAREHOUSE:${{ secrets.SNOWFLAKE_WAREHOUSE }}
          SNOWFLAKE_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE }}
        run: python scripts/sql_risk_validator.py
      - name: Update dependency metadata
        # keeps your PUBLIC.DEPENDENCY_METADATA table up‑to‑date
        env:
          SNOWFLAKE_ACCOUNT:   ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_USER:      ${{ secrets.SNOWFLAKE_USER }}
          SNOWFLAKE_PASSWORD:  ${{ secrets.SNOWFLAKE_PASSWORD }}
          SNOWFLAKE_ROLE:      ${{ secrets.SNOWFLAKE_ROLE }}
          SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
          SNOWFLAKE_DATABASE:  ${{ secrets.SNOWFLAKE_DATABASE }}
          # Optional: override schema.table if needed:
          # METADATA_TABLE:   MYSCHEMA.MY_DEPENDENCY_METADATA
        run: python scripts/update_dependency_metadata.py

      - name: Check object dependencies
        env:
          SNOWFLAKE_ACCOUNT:  ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_USER:     ${{ secrets.SNOWFLAKE_USER }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
          SNOWFLAKE_ROLE:     ${{ secrets.SNOWFLAKE_ROLE }}
          SNOWFLAKE_WAREHOUSE:${{ secrets.SNOWFLAKE_WAREHOUSE }}
          SNOWFLAKE_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE }}
        run: python scripts/dependency_checker.py

      - name: Generate rollback scripts
        env:
          SNOWFLAKE_ACCOUNT:  ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_USER:     ${{ secrets.SNOWFLAKE_USER }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
          SNOWFLAKE_ROLE:     ${{ secrets.SNOWFLAKE_ROLE }}
          SNOWFLAKE_WAREHOUSE:${{ secrets.SNOWFLAKE_WAREHOUSE }}
          SNOWFLAKE_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE }}
          SNOWFLAKE_SCHEMA:   ${{ secrets.SNOWFLAKE_SCHEMA }}
        run: |
          python scripts/rollback_generator.py

      - name: Get all unique schemas from setup and migrations folders
        id: get-schemas
        run: |
          SETUP_SCHEMAS=$(find snowflake/setup -maxdepth 1 -type f -name '*.sql' -printf "%f
" | awk -F '__' '{print $2}' | sort -u)
          MIGRATION_SCHEMAS=$(find snowflake/migrations -maxdepth 1 -type f -name '*.sql' -printf "%f
" | awk -F '__' '{print $2}' | sort -u)
          ALL_SCHEMAS=$(echo "$SETUP_SCHEMAS $MIGRATION_SCHEMAS" | tr ' ' '\n' | sort -u | tr '\n' ' ')
          echo "ALL_SCHEMAS=${ALL_SCHEMAS}" >> $GITHUB_OUTPUT
          echo "CURRENT_COMMIT=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: Bootstrap schemas (Initial Setup or New Schema Deployment)
        if: steps.get-schemas.outputs.ALL_SCHEMAS != ''
        env:
          SNOWFLAKE_ACCOUNT:      ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_USER:         ${{ secrets.SNOWFLAKE_USER }}
          SNOWFLAKE_PASSWORD:     ${{ secrets.SNOWFLAKE_PASSWORD }}
          SNOWFLAKE_ROLE:         ${{ secrets.SNOWFLAKE_ROLE }}
          SNOWFLAKE_WAREHOUSE:    ${{ secrets.SNOWFLAKE_WAREHOUSE }}
          SNOWFLAKE_DATABASE:     ${{ secrets.SNOWFLAKE_DATABASE }}
          SNOWFLAKE_SCHEMA:       ${{ secrets.SNOWFLAKE_SCHEMA }}
          SNOWFLAKE_OCSP_FAIL_OPEN: "true"
        run: |
          set -euo pipefail
          for schema_name in ${{ steps.get-schemas.outputs.ALL_SCHEMAS }}; do
            schemachange \
              --root-folder snowflake/setup \
              --snowflake-account "$SNOWFLAKE_ACCOUNT" \
              --snowflake-user "$SNOWFLAKE_USER" \
              --snowflake-role "$SNOWFLAKE_ROLE" \
              --snowflake-warehouse "$SNOWFLAKE_WAREHOUSE" \
              --snowflake-database "$SNOWFLAKE_DATABASE" \
              --snowflake-schema "$SNOWFLAKE_SCHEMA" \
              --change-history-table "${SNOWFLAKE_DATABASE}.${SNOWFLAKE_SCHEMA}.SCHEMA_CHANGE_HISTORY" \
              --create-change-history-table -v
          done

      - name: Apply incremental migrations
        if: steps.get-schemas.outputs.ALL_SCHEMAS != ''
        env:
          SNOWFLAKE_ACCOUNT:      ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_USER:         ${{ secrets.SNOWFLAKE_USER }}
          SNOWFLAKE_PASSWORD:     ${{ secrets.SNOWFLAKE_PASSWORD }}
          SNOWFLAKE_ROLE:         ${{ secrets.SNOWFLAKE_ROLE }}
          SNOWFLAKE_WAREHOUSE:    ${{ secrets.SNOWFLAKE_WAREHOUSE }}
          SNOWFLAKE_DATABASE:     ${{ secrets.SNOWFLAKE_DATABASE }}
          SNOWFLAKE_SCHEMA:       ${{ secrets.SNOWFLAKE_SCHEMA }}
          SNOWFLAKE_OCSP_FAIL_OPEN: "true"
        run: |
          set -euo pipefail
          for schema_name in ${{ steps.get-schemas.outputs.ALL_SCHEMAS }}; do
            schemachange \
              --root-folder snowflake/migrations \
              --snowflake-account "$SNOWFLAKE_ACCOUNT" \
              --snowflake-user "$SNOWFLAKE_USER" \
              --snowflake-role "$SNOWFLAKE_ROLE" \
              --snowflake-warehouse "$SNOWFLAKE_WAREHOUSE" \
              --snowflake-database "$SNOWFLAKE_DATABASE" \
              --snowflake-schema "$SNOWFLAKE_SCHEMA" \
              --change-history-table "${SNOWFLAKE_DATABASE}.${SNOWFLAKE_SCHEMA}.SCHEMA_CHANGE_HISTORY" -v
          done

      - name: Nothing to do
        if: steps.get-schemas.outputs.ALL_SCHEMAS == ''
        run: echo "✔️ No schema files found. Skipping deployment."
