name: ‚ùÑÔ∏è Snowflake Full Deploy

on:
  push:
    branches:
      - master
  workflow_dispatch: # Allows manual trigger from GitHub UI

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Get full history for git diff if needed, though we primarily rely on file presence now

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install schemachange snowflake-connector-python

      - name: Validate Snowflake env vars
        env:
          SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
          SNOWFLAKE_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
          SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
          SNOWFLAKE_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE }}
        run: |
          for v in SNOWFLAKE_ACCOUNT SNOWFLAKE_USER SNOWFLAKE_PASSWORD SNOWFLAKE_ROLE SNOWFLAKE_WAREHOUSE SNOWFLAKE_DATABASE; do
            if [ -z "${!v}" ]; then
              echo "‚ùå Missing $v"
              exit 1
            fi
          done

      - name: Get all unique schemas from setup and migrations folders
        id: get-schemas
        run: |
          # This will get ALL schemas that have setup or migration files, regardless of specific commit changes
          SETUP_SCHEMAS=$(find snowflake/setup -maxdepth 1 -type f -name '*.sql' -printf "%f\n" | awk -F '__' '{print $1}' | sort -u)
          echo "Discovered schemas in setup: $SETUP_SCHEMAS"

          MIGRATION_SCHEMAS=$(find snowflake/migrations -maxdepth 1 -type f -name '*.sql' -printf "%f\n" | awk -F '__' '{print $1}' | sort -u)
          echo "Discovered schemas in migrations: $MIGRATION_SCHEMAS"

          ALL_SCHEMAS=$(echo "$SETUP_SCHEMAS $MIGRATION_SCHEMAS" | tr ' ' '\n' | sort -u | tr '\n' ' ')
          echo "ALL_SCHEMAS=${ALL_SCHEMAS}" >> $GITHUB_OUTPUT
          echo "Combined unique schemas for deployment: $ALL_SCHEMAS"


      - name: Bootstrap schemas (Initial Setup or New Schema Deployment)
        if: github.event_name == 'workflow_dispatch' || steps.get-schemas.outputs.ALL_SCHEMAS != ''
        env:
          SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
          SNOWFLAKE_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
          SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
          SNOWFLAKE_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE }}
          SNOWFLAKE_OCSP_FAIL_OPEN: "true"
        run: |
          set -euo pipefail # Exit immediately if a command exits with a non-zero status or undefined variables
          echo "üöÄ Running bootstrap for each schema using files in snowflake/setup/..."
          
          # Iterate over each unique schema discovered
          for schema_name in ${{ steps.get-schemas.outputs.ALL_SCHEMAS }}; do
            echo "‚öôÔ∏è Processing initial setup for schema: $schema_name"

            # Create a temporary connections.toml for each schema run
            mkdir -p .schemachange
            cat > .schemachange/connections.toml <<EOF
              [connections]
                [connections.default]
                account = "${SNOWFLAKE_ACCOUNT}"
                user = "${SNOWFLAKE_USER}"
                password = "${SNOWFLAKE_PASSWORD}"
                role = "${SNOWFLAKE_ROLE}"
                warehouse = "${SNOWFLAKE_WAREHOUSE}"
                database = "${SNOWFLAKE_DATABASE}"
                schema = "${schema_name}" # Set the default schema for this specific run
            EOF
            chmod 0600 ".schemachange/connections.toml"
            # Execute schemachange for the 'setup' folder.
            # It will process relevant files for this schema based on its internal logic
            # and the SNOWFLAKE_SCHEMA context.
            schemachange deploy \
              --root-folder snowflake/setup \
              --connection-name default \
              --connections-file-path .schemachange/connections.toml \
              --change-history-table CHANGE_HISTORY \
              --create-change-history-table \
              -v # Enable verbose output for more details
            
            # Clean up connections.toml for the next iteration (optional but good practice)
            rm .schemachange/connections.toml
          done

      - name: Apply incremental migrations
        if: github.event_name == 'workflow_dispatch' || steps.get-schemas.outputs.ALL_SCHEMAS != ''
        env:
          SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
          SNOWFLAKE_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
          SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
          SNOWFLAKE_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE }}
          SNOWFLAKE_OCSP_FAIL_OPEN: "true"
        run: |
          set -euo pipefail
          echo "üîÅ Applying incremental migrations for each schema using files in snowflake/migrations/..."

          # Iterate over each unique schema discovered
          for schema_name in ${{ steps.get-schemas.outputs.ALL_SCHEMAS }}; do
            echo "üìÑ Processing migrations for schema: $schema_name"

            # Create a temporary connections.toml for each schema run
            mkdir -p .schemachange
            cat > .schemachange/connections.toml <<EOF
              [connections]
                [connections.default]
                account = "${SNOWFLAKE_ACCOUNT}"
                user = "${SNOWFLAKE_USER}"
                password = "${SNOWFLAKE_PASSWORD}"
                role = "${SNOWFLAKE_ROLE}"
                warehouse = "${SNOWFLAKE_WAREHOUSE}"
                database = "${SNOWFLAKE_DATABASE}"
                schema = "${schema_name}" # Set the default schema for this specific run
            EOF

            # Execute schemachange for the 'migrations' folder.
            # It will process relevant migration files for this schema.
            schemachange deploy \
              --root-folder snowflake/migrations \
              --connection-name default \
              --connections-file-path .schemachange/connections.toml \
              --change-history-table CHANGE_HISTORY \
              --create-change-history-table \
              -v # Enable verbose output for more details
            
            # Clean up connections.toml
            rm .schemachange/connections.toml
          done

      - name: Nothing to do
        if: >
          github.event_name != 'workflow_dispatch' &&
          steps.get-schemas.outputs.ALL_SCHEMAS == ''
        run: echo "‚úîÔ∏è No schema files found in the repository. Skipping deployment."
