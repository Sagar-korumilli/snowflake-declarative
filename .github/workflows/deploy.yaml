name: ❄️ Snowflake Full Deploy

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
      # 1. Checkout full history so diff works even on first run
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2. Set up Python and install schemachange
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install schemachange snowflake-connector-python

      # 3. Validate secrets
      - name: Validate Snowflake env vars
        env:
          SNOWFLAKE_ACCOUNT:   ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_USER:      ${{ secrets.SNOWFLAKE_USER }}
          SNOWFLAKE_PASSWORD:  ${{ secrets.SNOWFLAKE_PASSWORD }}
          SNOWFLAKE_ROLE:      ${{ secrets.SNOWFLAKE_ROLE }}
          SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
          SNOWFLAKE_DATABASE:  ${{ secrets.SNOWFLAKE_DATABASE }}
        run: |
          for v in SNOWFLAKE_ACCOUNT SNOWFLAKE_USER SNOWFLAKE_PASSWORD SNOWFLAKE_ROLE SNOWFLAKE_WAREHOUSE SNOWFLAKE_DATABASE; do
            if [ -z "${!v}" ]; then
              echo "❌ Missing $v" && exit 1
            fi
          done

      # 4. Detect changes under setup/
      - name: Detect setup/ changes
        id: detect-setup
        run: |
          if [ "${{ github.event.before }}" = "0000000000000000000000000000000000000000" ]; then
            echo "run=true" >> $GITHUB_OUTPUT
          else
            CHG=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -E '^snowflake/setup/.*\.sql' || true)
            if [ -n "$CHG" ]; then
              echo "run=true" >> $GITHUB_OUTPUT
            else
              echo "run=false" >> $GITHUB_OUTPUT
            fi
          fi

      # 5. Run setup scripts if needed
      - name: Bootstrap schemas
        if: github.event_name == 'workflow_dispatch' || steps.detect-setup.outputs.run == 'true'
        env:
          SNOWFLAKE_ACCOUNT:   ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_USER:      ${{ secrets.SNOWFLAKE_USER }}
          SNOWFLAKE_PASSWORD:  ${{ secrets.SNOWFLAKE_PASSWORD }}
          SNOWFLAKE_ROLE:      ${{ secrets.SNOWFLAKE_ROLE }}
          SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
          SNOWFLAKE_DATABASE:  ${{ secrets.SNOWFLAKE_DATABASE }}
          SNOWFLAKE_OCSP_FAIL_OPEN: "true"
        run: |
          set -euo pipefail
          echo "🚀 Running bootstrap for all setup scripts…"
          for file in snowflake/setup/*.sql; do
            [ -e "$file" ] || continue
            schema=$(basename "$file" | cut -d'__' -f1)
            echo "⚙️ Bootstrapping schema $schema with $file"
            schemachange \
              --root-folder snowflake/setup \
              --snowflake-account "$SNOWFLAKE_ACCOUNT" \
              --snowflake-user "$SNOWFLAKE_USER" \
              --snowflake-password "$SNOWFLAKE_PASSWORD" \
              --snowflake-role "$SNOWFLAKE_ROLE" \
              --snowflake-warehouse "$SNOWFLAKE_WAREHOUSE" \
              --snowflake-database "$SNOWFLAKE_DATABASE" \
              --snowflake-schema "$schema" \
              --change-history-table CHANGE_HISTORY \
              --create-change-history-table \
              -f "$file" -v
          done

      # 6. Detect changes under migration/
      - name: Detect migration/ changes
        id: detect-migration
        run: |
          if [ "${{ github.event.before }}" = "0000000000000000000000000000000000000000" ]; then
            echo "run=true" >> $GITHUB_OUTPUT
          else
            MIG=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -E '^snowflake/migration/.*\.sql' || true)
            if [ -n "$MIG" ]; then
              echo "run=true" >> $GITHUB_OUTPUT
            else
              echo "run=false" >> $GITHUB_OUTPUT
            fi
          fi

      # 7. Run incremental migration scripts
      - name: Apply incremental migrations
        if: steps.detect-migration.outputs.run == 'true'
        env:
          SNOWFLAKE_ACCOUNT:   ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_USER:      ${{ secrets.SNOWFLAKE_USER }}
          SNOWFLAKE_PASSWORD:  ${{ secrets.SNOWFLAKE_PASSWORD }}
          SNOWFLAKE_ROLE:      ${{ secrets.SNOWFLAKE_ROLE }}
          SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
          SNOWFLAKE_DATABASE:  ${{ secrets.SNOWFLAKE_DATABASE }}
          SNOWFLAKE_OCSP_FAIL_OPEN: "true"
        run: |
          set -euo pipefail
          echo "🔁 Applying incremental migrations…"
          for file in snowflake/migration/*.sql; do
            [ -e "$file" ] || continue
            schema=$(basename "$file" | cut -d'__' -f1)
            echo "📄 Applying $file to schema $schema"
            schemachange \
              --root-folder snowflake/migration \
              --snowflake-account "$SNOWFLAKE_ACCOUNT" \
              --snowflake-user "$SNOWFLAKE_USER" \
              --snowflake-password "$SNOWFLAKE_PASSWORD" \
              --snowflake-role "$SNOWFLAKE_ROLE" \
              --snowflake-warehouse "$SNOWFLAKE_WAREHOUSE" \
              --snowflake-database "$SNOWFLAKE_DATABASE" \
              --snowflake-schema "$schema" \
              --change-history-table CHANGE_HISTORY \
              --create-change-history-table \
              -f "$file" -v
          done

      # 8. Exit if nothing changed
      - name: Nothing to do
        if: >
          steps.detect-setup.outputs.run == 'false' &&
          steps.detect-migration.outputs.run == 'false' &&
          github.event_name != 'workflow_dispatch'
        run: echo "✔️ No setup or migration changes detected. Skipping deployment."
