name: snowflake-devops-demo

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy-snowflake-changes-job:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'  # Updated to a supported Python version

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install schemachange snowflake-connector-python

      - name: Run schemachange for each schema
        env:
          SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
          SNOWFLAKE_OCSP_FAIL_OPEN: "true"  # Temporary workaround for certificate issues
        run: |
          echo "üîÅ Starting Snowflake schema deployment..."
          echo "üì¶ Deploying to Snowflake account: ${{ secrets.SNOWFLAKE_ACCOUNT }}, role: ${{ secrets.SNOWFLAKE_ROLE }}, DB: ${{ secrets.SNOWFLAKE_DATABASE }}"

          # Validate environment variables
          if [ -z "${{ secrets.SNOWFLAKE_ACCOUNT }}" ] || [ -z "${{ secrets.SNOWFLAKE_USER }}" ] || [ -z "${{ secrets.SNOWFLAKE_ROLE }}" ] || \
             [ -z "${{ secrets.SNOWFLAKE_WAREHOUSE }}" ] || [ -z "${{ secrets.SNOWFLAKE_DATABASE }}" ] || [ -z "${{ secrets.SNOWFLAKE_PASSWORD }}" ]; then
            echo "‚ùå Missing required Snowflake environment variables"
            exit 1
          fi

          # Create connections.toml for schemachange
          cat <<EOF > connections.toml
          [snowflake]
          account = "${{ secrets.SNOWFLAKE_ACCOUNT }}"
          user = "${{ secrets.SNOWFLAKE_USER }}"
          role = "${{ secrets.SNOWFLAKE_ROLE }}"
          warehouse = "${{ secrets.SNOWFLAKE_WAREHOUSE }}"
          database = "${{ secrets.SNOWFLAKE_DATABASE }}"
          password = "${{ secrets.SNOWFLAKE_PASSWORD }}"
          EOF

          # Check if migration directory exists and is not empty
          if [ ! -d "snowflake/migration" ] || [ -z "$(ls -A snowflake/migration 2>/dev/null)" ]; then
            echo "‚ùå No migration directories found in snowflake/migration/"
            exit 1
          fi

          # Iterate over each subdirectory in snowflake/migration
          for dir in snowflake/migration/*/ ; do
            if [ -d "$dir" ]; then
              echo "üìÇ Running schemachange on $dir"
              schemachange \
                -f "$dir" \
                -c "${{ secrets.SNOWFLAKE_DATABASE }}.SCHEMACHANGE.CHANGE_HISTORY" \
                --create-change-history-table \
                -v || { echo "‚ùå Failed to run schemachange on $dir"; exit 1; }
            else
              echo "‚ö†Ô∏è Skipping $dir: not a directory"
            fi
          done
          echo "‚úÖ Schema deployment completed successfully"
